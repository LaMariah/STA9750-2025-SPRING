# Integrated Temporal Analysis of NYC Noise Complaints
# Author: [Your Name]
# Date: March 30, 2025
# Purpose: Analyze temporal patterns in NYC noise complaints data by integrating multiple datasets
# This script analyzes how noise complaints vary by time of day, day of week, and season,
# with integration of neighborhood boundaries, shooting incidents, and socioeconomic factors

# Load required libraries -------------------------------------------------------
library(tidyverse)  # For data manipulation and visualization
library(lubridate)  # For date/time manipulation
library(sf)         # For spatial data handling
library(viridis)    # For colorblind-friendly palettes
library(scales)     # For better scale formatting in plots
library(gridExtra)  # For arranging multiple plots
library(ggspatial)  # For spatial visualization enhancements
library(ggridges)   # For ridge plots
library(tidycensus) # For working with ACS data

# Set theme for consistent visualization
theme_set(theme_minimal(base_size = 12) +
            theme(plot.title = element_text(hjust = 0.5, face = "bold"),
                  plot.subtitle = element_text(hjust = 0.5),
                  legend.position = "bottom"))

# Data Loading and Integration --------------------------------------------------
# 1. Load 311 Noise Complaints data
# Note: You should adjust the file path as needed
noise_data <- read_csv("data/311_noise_complaints.csv")

# 2. Load NYC Neighborhood Boundaries (GeoJSON)
# NYC neighborhood boundaries (NTAs - Neighborhood Tabulation Areas)
nyc_neighborhoods <- st_read("data/nyc_neighborhoods.geojson")

# 3. Load NYPD Shooting Incident data
shooting_data <- read_csv("data/nypd_shooting_incident_data.csv")

# 4. Load pre-processed ACS data
# Note: We're loading pre-processed data for simplicity
# In practice, you might use the tidycensus package to get this data directly
acs_data <- read_csv("data/acs_socioeconomic_by_nta.csv")

# Print basic information about the datasets
cat("Noise complaints dataset:", dim(noise_data)[1], "rows,", dim(noise_data)[2], "columns\n")
cat("Shooting incidents dataset:", dim(shooting_data)[1], "rows,", dim(shooting_data)[2], "columns\n")
cat("ACS socioeconomic dataset:", dim(acs_data)[1], "rows,", dim(acs_data)[2], "columns\n")
cat("NYC neighborhoods dataset:", dim(nyc_neighborhoods)[1], "neighborhoods\n")

# Data Cleaning and Preparation -------------------------------------------------
# Clean and transform 311 noise complaints data
noise_clean <- noise_data %>%
  # Parse dates (adjust format if needed)
  mutate(created_date = as_datetime(created_date),
         closed_date = as_datetime(closed_date)) %>%
  # Create derived temporal variables
  mutate(
    # Time components
    hour = hour(created_date),
    day = day(created_date),
    month = month(created_date),
    year = year(created_date),
    
    # Day of week (1 = Sunday, 7 = Saturday)
    day_of_week = wday(created_date),
    day_name = wday(created_date, label = TRUE, abbr = FALSE),
    
    # Weekend flag
    is_weekend = if_else(day_of_week %in% c(1, 7), "Weekend", "Weekday"),
    
    # Time of day categories
    time_of_day = case_when(
      hour >= 5 & hour < 12 ~ "Morning (5am-12pm)",
      hour >= 12 & hour < 17 ~ "Afternoon (12pm-5pm)",
      hour >= 17 & hour < 22 ~ "Evening (5pm-10pm)",
      TRUE ~ "Night (10pm-5am)"
    ),
    
    # Season categories
    season = case_when(
      month %in% c(12, 1, 2) ~ "Winter",
      month %in% c(3, 4, 5) ~ "Spring",
      month %in% c(6, 7, 8) ~ "Summer",
      month %in% c(9, 10, 11) ~ "Fall"
    ),
    
    # Month name
    month_name = month(created_date, label = TRUE, abbr = TRUE),
    
    # For time difference calculations
    response_time_hours = as.numeric(difftime(closed_date, created_date, units = "hours"))
  ) %>%
  # Order factor levels for consistent plotting
  mutate(
    day_name = factor(day_name, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", 
                                           "Thursday", "Friday", "Saturday")),
    time_of_day = factor(time_of_day, levels = c("Morning (5am-12pm)", "Afternoon (12pm-5pm)", 
                                                 "Evening (5pm-10pm)", "Night (10pm-5am)")),
    season = factor(season, levels = c("Winter", "Spring", "Summer", "Fall"))
  )

# Clean and transform shooting data
shooting_clean <- shooting_data %>%
  # Parse dates (adjust format if needed)
  mutate(occur_date = mdy(occur_date)) %>%
  # Add time components
  mutate(
    occur_time = hms(occur_time),
    hour = hour(occur_time),
    day_of_week = wday(occur_date),
    day_name = wday(occur_date, label = TRUE, abbr = FALSE),
    month = month(occur_date),
    year = year(occur_date),
    is_weekend = if_else(day_of_week %in% c(1, 7), "Weekend", "Weekday"),
    time_of_day = case_when(
      hour >= 5 & hour < 12 ~ "Morning (5am-12pm)",
      hour >= 12 & hour < 17 ~ "Afternoon (12pm-5pm)",
      hour >= 17 & hour < 22 ~ "Evening (5pm-10pm)",
      TRUE ~ "Night (10pm-5am)"
    ),
    season = case_when(
      month %in% c(12, 1, 2) ~ "Winter",
      month %in% c(3, 4, 5) ~ "Spring",
      month %in% c(6, 7, 8) ~ "Summer",
      month %in% c(9, 10, 11) ~ "Fall"
    )
  ) %>%
  # Order factor levels
  mutate(
    day_name = factor(day_name, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", 
                                           "Thursday", "Friday", "Saturday")),
    time_of_day = factor(time_of_day, levels = c("Morning (5am-12pm)", "Afternoon (12pm-5pm)", 
                                                 "Evening (5pm-10pm)", "Night (10pm-5am)")),
    season = factor(season, levels = c("Winter", "Spring", "Summer", "Fall"))
  )

# Spatial Joins and Data Integration --------------------------------------------
# Convert noise complaints to sf object
noise_sf <- noise_clean %>%
  filter(!is.na(latitude), !is.na(longitude)) %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326)

# Spatial join with neighborhoods
noise_with_nta <- st_join(noise_sf, nyc_neighborhoods %>% select(nta_code, nta_name, borough))

# Convert back to dataframe for easier manipulation
noise_nta_df <- noise_with_nta %>%
  st_drop_geometry() %>%
  select(-geometry)

# Merge with ACS data to add socioeconomic information
noise_with_acs <- noise_nta_df %>%
  left_join(acs_data, by = "nta_code")

# Spatial join for shooting data
shooting_sf <- shooting_clean %>%
  filter(!is.na(longitude), !is.na(latitude)) %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326)

shooting_with_nta <- st_join(shooting_sf, nyc_neighborhoods %>% select(nta_code, nta_name, borough))
shooting_nta_df <- shooting_with_nta %>%
  st_drop_geometry()

# Neighborhood-Level Temporal Analysis ------------------------------------------
# Get top 10 neighborhoods by complaint volume
top_neighborhoods <- noise_nta_df %>%
  count(nta_name, sort = TRUE) %>%
  head(10) %>%
  pull(nta_name)

# Create hourly patterns by neighborhood
neighborhood_hourly <- noise_nta_df %>%
  filter(nta_name %in% top_neighborhoods) %>%
  group_by(nta_name, hour) %>%
  summarise(count = n(), .groups = "drop") %>%
  ggplot(aes(x = hour, y = count, color = nta_name, group = nta_name)) +
  geom_line(size = 1) +
  scale_x_continuous(breaks = seq(0, 23, 3), 
                     labels = c("12am", "3am", "6am", "9am", "12pm", "3pm", "6pm", "9pm")) +
  scale_color_viridis_d() +
  labs(title = "Hourly Noise Complaint Patterns by Neighborhood",
       subtitle = "Top 10 neighborhoods by complaint volume",
       x = "Hour of Day",
       y = "Number of Complaints",
       color = "Neighborhood") +
  theme(legend.position = "bottom",
        panel.grid.minor = element_blank())

# Create a heatmap showing hourly patterns across top neighborhoods
heatmap_neighborhood_hour <- noise_nta_df %>%
  filter(nta_name %in% top_neighborhoods) %>%
  count(nta_name, hour) %>%
  group_by(nta_name) %>%
  mutate(normalized_count = n / sum(n) * 100) %>%  # Normalize by neighborhood for better comparison
  ggplot(aes(x = hour, y = nta_name, fill = normalized_count)) +
  geom_tile() +
  scale_fill_viridis_c(option = "plasma", name = "% of Neighborhood\nComplaints") +
  scale_x_continuous(breaks = seq(0, 23, 3), 
                     labels = c("12am", "3am", "6am", "9am", "12pm", "3pm", "6pm", "9pm")) +
  labs(title = "Noise Complaints by Neighborhood and Hour",
       subtitle = "Percentage distribution within each neighborhood",
       x = "Hour of Day",
       y = "") +
  theme(panel.grid = element_blank())

# Income-Based Temporal Analysis ------------------------------------------------
# Create income quartiles from ACS median household income
income_quartiles <- noise_with_acs %>%
  filter(!is.na(median_household_income)) %>%
  mutate(income_quartile = ntile(median_household_income, 4)) %>%
  mutate(income_group = case_when(
    income_quartile == 1 ~ "Low Income",
    income_quartile == 2 ~ "Lower-Middle Income",
    income_quartile == 3 ~ "Upper-Middle Income",
    income_quartile == 4 ~ "High Income"
  )) %>%
  mutate(income_group = factor(income_group, 
                               levels = c("Low Income", "Lower-Middle Income", 
                                          "Upper-Middle Income", "High Income")))

# Analyze hourly patterns by income quartile
income_hourly <- income_quartiles %>%
  group_by(income_group, hour) %>%
  summarise(count = n(), .groups = "drop") %>%
  ggplot(aes(x = hour, y = count, color = income_group, group = income_group)) +
  geom_line(size = 1) +
  scale_x_continuous(breaks = seq(0, 23, 3), 
                     labels = c("12am", "3am", "6am", "9am", "12pm", "3pm", "6pm", "9pm")) +
  scale_color_viridis_d() +
  labs(title = "Hourly Noise Complaint Patterns by Neighborhood Income Level",
       subtitle = "How do complaint times vary by socioeconomic status?",
       x = "Hour of Day",
       y = "Number of Complaints",
       color = "Income Group") +
  theme(legend.position = "bottom",
        panel.grid.minor = element_blank())

# Create a ridge plot showing time-of-day distribution by income group
income_ridge <- income_quartiles %>%
  ggplot(aes(x = hour, y = income_group, fill = income_group)) +
  geom_density_ridges(scale = 2, alpha = 0.7) +
  scale_x_continuous(breaks = seq(0, 23, 3), 
                     labels = c("12am", "3am", "6am", "9am", "12pm", "3pm", "6pm", "9pm")) +
  scale_fill_viridis_d() +
  labs(title = "Distribution of Noise Complaints by Hour and Income Level",
       subtitle = "Ridge density plot showing when different income groups complain",
       x = "Hour of Day",
       y = "") +
  theme(legend.position = "none",
        panel.grid.minor = element_blank())

# Comparative Analysis with Shooting Incidents ----------------------------------
# Compare hourly patterns of noise complaints vs. shooting incidents
hourly_comparison <- bind_rows(
  # Noise complaints hourly counts
  noise_clean %>%
    count(hour) %>%
    mutate(type = "Noise Complaints", 
           normalized_count = n / sum(n) * 100),
  
  # Shooting incidents hourly counts
  shooting_clean %>%
    count(hour) %>%
    mutate(type = "Shooting Incidents", 
           normalized_count = n / sum(n) * 100)
) %>%
  ggplot(aes(x = hour, y = normalized_count, color = type, group = type)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  scale_x_continuous(breaks = seq(0, 23, 3), 
                     labels = c("12am", "3am", "6am", "9am", "12pm", "3pm", "6pm", "9pm")) +
  scale_color_manual(values = c("Noise Complaints" = "#2c7fb8", 
                                "Shooting Incidents" = "#d95f02")) +
  labs(title = "Comparing Temporal Patterns: Noise Complaints vs. Shooting Incidents",
       subtitle = "Percentage distribution by hour of day",
       x = "Hour of Day",
       y = "Percentage of Incidents",
       color = "Incident Type") +
  theme(legend.position = "bottom",
        panel.grid.minor = element_blank())

# Day of week comparison
day_comparison <- bind_rows(
  # Noise complaints
  noise_clean %>%
    count(day_name) %>%
    mutate(type = "Noise Complaints", 
           normalized_count = n / sum(n) * 100),
  
  # Shooting incidents
  shooting_clean %>%
    count(day_name) %>%
    mutate(type = "Shooting Incidents", 
           normalized_count = n / sum(n) * 100)
) %>%
  ggplot(aes(x = day_name, y = normalized_count, fill = type)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = c("Noise Complaints" = "#2c7fb8", 
                               "Shooting Incidents" = "#d95f02")) +
  labs(title = "Day of Week Comparison: Noise Complaints vs. Shooting Incidents",
       subtitle = "Percentage distribution by day of week",
       x = "",
       y = "Percentage of Incidents",
       fill = "Incident Type") +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 45, hjust = 1))

# Seasonal Analysis by Neighborhood Characteristics -----------------------------
# Create seasonal trends by population density
# Group neighborhoods by population density
pop_density_groups <- noise_with_acs %>%
  filter(!is.na(population_density)) %>%
  mutate(density_quartile = ntile(population_density, 4)) %>%
  mutate(density_group = case_when(
    density_quartile == 1 ~ "Low Density",
    density_quartile == 2 ~ "Medium-Low Density",
    density_quartile == 3 ~ "Medium-High Density",
    density_quartile == 4 ~ "High Density"
  )) %>%
  mutate(density_group = factor(density_group, 
                                levels = c("Low Density", "Medium-Low Density", 
                                           "Medium-High Density", "High Density")))

# Create monthly trends by population density
monthly_by_density <- pop_density_groups %>%
  group_by(density_group, month_name) %>%
  summarise(count = n(), .groups = "drop") %>%
  # Ensure correct month ordering
  mutate(month_name = factor(month_name, levels = month.abb)) %>%
  ggplot(aes(x = month_name, y = count, color = density_group, group = density_group)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  scale_color_viridis_d() +
  labs(title = "Monthly Noise Complaint Patterns by Population Density",
       subtitle = "Seasonal variations across different neighborhood densities",
       x = "Month",
       y = "Number of Complaints",
       color = "Population Density") +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 45, hjust = 1))

# Season by neighborhood type
seasonal_by_income <- income_quartiles %>%
  group_by(income_group, season) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(income_group) %>%
  mutate(percentage = count / sum(count) * 100) %>%
  ggplot(aes(x = season, y = percentage, fill = income_group)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_viridis_d() +
  labs(title = "Seasonal Noise Complaint Patterns by Income Level",
       subtitle = "Percentage of complaints in each season by neighborhood income",
       x = "Season",
       y = "Percentage of Neighborhood Complaints",
       fill = "Income Group") +
  theme(legend.position = "bottom")

# Heat Map of Neighborhood-Hour Patterns ----------------------------------------
# Create a data frame for the heatmap
heatmap_data <- noise_nta_df %>%
  filter(!is.na(nta_name)) %>%
  count(nta_name, hour) %>%
  group_by(nta_name) %>%
  # Normalize by total complaints in the neighborhood
  mutate(
    total_complaints = sum(n),
    normalized_count = n / total_complaints * 100,
    quartile = ntile(normalized_count, 4)
  ) %>%
  ungroup()

# Create a comprehensive heatmap
heatmap_full <- heatmap_data %>%
  # Get top 20 neighborhoods by total complaints
  filter(nta_name %in% (heatmap_data %>% 
                          group_by(nta_name) %>% 
                          summarise(total = sum(n), .groups = "drop") %>% 
                          arrange(desc(total)) %>% 
                          head(20) %>% 
                          pull(nta_name))) %>%
  ggplot(aes(x = hour, y = reorder(nta_name, total_complaints), fill = normalized_count)) +
  geom_tile() +
  scale_fill_viridis_c(option = "plasma", name = "% of Neighborhood\nComplaints") +
  scale_x_continuous(breaks = seq(0, 23, 3), 
                     labels = c("12am", "3am", "6am", "9am", "12pm", "3pm", "6pm", "9pm")) +
  labs(title = "Noise Complaint Patterns by Hour and Neighborhood",
       subtitle = "Showing top 20 neighborhoods by complaint volume",
       x = "Hour of Day",
       y = "Neighborhood") +
  theme(panel.grid = element_blank(),
        axis.text.y = element_text(size = 8))

# Time-Series Analysis of Year-over-Year Changes -------------------------------
# Create a time series of monthly complaints by year
monthly_time_series <- noise_nta_df %>%
  group_by(year, month) %>%
  summarise(count = n(), .groups = "drop") %>%
  # Create year-month date for proper time-series plotting
  mutate(year_month = make_date(year, month, 1)) %>%
  ggplot(aes(x = year_month, y = count, group = 1)) +
  geom_line(color = "#440154", size = 1) +
  geom_point(color = "#440154", size = 2) +
  scale_x_date(date_breaks = "3 months", date_labels = "%b %Y") +
  labs(title = "Monthly Noise Complaints Over Time",
       subtitle = "Identifying long-term trends and seasonal patterns",
       x = "",
       y = "Number of Complaints") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Identify neighborhoods with significant changes over time
neighborhood_trend <- noise_nta_df %>%
  # Filter to neighborhoods with enough data
  group_by(nta_name) %>%
  filter(n() >= 100) %>%  # Require at least 100 complaints
  group_by(nta_name, year) %>%
  summarise(count = n(), .groups = "drop") %>%
  # Calculate year-over-year change
  group_by(nta_name) %>%
  arrange(nta_name, year) %>%
  mutate(prev_year_count = lag(count),
         yoy_change_pct = (count - prev_year_count) / prev_year_count * 100) %>%
  ungroup()

# Find neighborhoods with most significant increases/decreases
top_increase_neighborhoods <- neighborhood_trend %>%
  filter(!is.na(yoy_change_pct)) %>%
  arrange(desc(yoy_change_pct)) %>%
  head(5) %>%
  pull(nta_name)

top_decrease_neighborhoods <- neighborhood_trend %>%
  filter(!is.na(yoy_change_pct)) %>%
  arrange(yoy_change_pct) %>%
  head(5) %>%
  pull(nta_name)

# Plot trends for neighborhoods with significant changes
significant_change_plot <- neighborhood_trend %>%
  filter(nta_name %in% c(top_increase_neighborhoods, top_decrease_neighborhoods)) %>%
  mutate(change_type = if_else(nta_name %in% top_increase_neighborhoods, 
                               "Largest Increase", "Largest Decrease")) %>%
  ggplot(aes(x = year, y = count, color = nta_name, group = nta_name, linetype = change_type)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  scale_linetype_manual(values = c("Largest Increase" = "solid", "Largest Decrease" = "dashed")) +
  labs(title = "Neighborhoods with Most Significant Changes in Noise Complaints",
       subtitle = "Year-over-year trends in notable neighborhoods",
       x = "Year",
       y = "Number of Complaints",
       color = "Neighborhood",
       linetype = "Trend Type") +
  theme(legend.position = "bottom")

# Save Visualizations ----------------------------------------------------------
# Create folder for plots if it doesn't exist
dir.create("plots", showWarnings = FALSE)

# Save neighborhood-level temporal visualizations
ggsave("plots/neighborhood_hourly_patterns.png", neighborhood_hourly, width = 10, height = 6)
ggsave("plots/heatmap_neighborhood_hour.png", heatmap_neighborhood_hour, width = 12, height = 8)
ggsave("plots/heatmap_full.png", heatmap_full, width = 12, height = 10)

# Save income-based temporal visualizations
ggsave("plots/income_hourly_patterns.png", income_hourly, width = 10, height = 6)
ggsave("plots/income_ridge_plot.png", income_ridge, width = 10, height = 6)

# Save comparison with shooting incidents
ggsave("plots/hourly_comparison_shootings.png", hourly_comparison, width = 10, height = 6)
ggsave("plots/day_comparison_shootings.png", day_comparison, width = 10, height = 6)

# Save seasonal analysis
ggsave("plots/monthly_by_density.png", monthly_by_density, width = 10, height = 6)
ggsave("plots/seasonal_by_income.png", seasonal_by_income, width = 10, height = 6)

# Save time-series analysis
ggsave("plots/monthly_time_series.png", monthly_time_series, width = 12, height = 6)
ggsave("plots/significant_change_plot.png", significant_change_plot, width = 10, height = 6)

# Export Summary Data ----------------------------------------------------------
# Create summary by neighborhood, hour, and day of week for further analysis
neighborhood_time_summary <- noise_nta_df %>%
  group_by(nta_name, borough, hour, day_name) %>%
  summarise(
    complaint_count = n(),
    .groups = "drop"
  )

# Create summary with socioeconomic factors
socioeconomic_time_summary <- noise_with_acs %>%
  group_by(nta_name, median_household_income, population_density, hour, time_of_day) %>%
  summarise(
    complaint_count = n(),
    .groups = "drop"
  )

# Create summary comparing noise complaints and shooting incidents
comparison_summary <- bind_rows(
  noise_nta_df %>%
    group_by(nta_name, hour) %>%
    summarise(noise_count = n(), .groups = "drop"),
  
  shooting_nta_df %>%
    group_by(nta_name, hour) %>%
    summarise(shooting_count = n(), .groups = "drop")
) %>%
  group_by(nta_name, hour) %>%
  summarise(
    noise_count = sum(noise_count, na.rm = TRUE),
    shooting_count = sum(shooting_count, na.rm = TRUE),
    .groups = "drop"
  )

# Save summary data for integration with other analyses
write_csv(neighborhood_time_summary, "data/neighborhood_time_summary.csv")
write_csv(socioeconomic_time_summary, "data/socioeconomic_time_summary.csv")
write_csv(comparison_summary, "data/noise_shooting_comparison.csv")

# End of Script ----------------------------------------------------------------