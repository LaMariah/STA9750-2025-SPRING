---
title: "STA 9750 Mini-Project #03: Creating the Ultimate Playlist"
author: "Your Name"
date: "`r Sys.Date()`"
format: 
  html:
    code-fold: true      # Code is hidden by default; foldable if needed
    code-tools: true     # Allows copying code, etc.
    toc: true
    toc-depth: 3
    theme: cosmo
editor: visual
execute:
  warning: false
  message: false
---
# This chunk is for setup
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(jsonlite)


# Load packages
library(tidyverse)
library(lubridate)
library(jsonlite)
library(ggrepel)
library(knitr)
library(kableExtra)
library(plotly)
library(gganimate)

load_songs <- function() {
  # Create the directory if it doesn't exist
  if (!dir.exists("data/mp03")) {
    dir.create("data/mp03", recursive = TRUE)
    message("Created directory: data/mp03")
  }
  
  # Define file path and URL for the song dataset
  file_path <- "data/mp03/data.csv"
  url <- "https://raw.githubusercontent.com/gabminamedez/spotify-data/refs/heads/master/data.csv"
  
  # Download the file only if it doesn't exist
  if (!file.exists(file_path)) {
    download.file(url, destfile = file_path, mode = "wb")
    message("Downloaded song data to ", file_path)
  } else {
    message("Song data file already exists at ", file_path)
  }
  
  # Read the CSV into a data frame
  songs <- read.csv(file_path, stringsAsFactors = FALSE)
  return(songs)
}


# We can show some code here if we want, or keep it hidden as well.
songs_df <- load_songs()
head(songs_df)


load_playlists <- function() {
  # Create the directory for playlists if it doesn't exist
  playlist_dir <- "data/mp03/playlists"
  if (!dir.exists(playlist_dir)) {
    dir.create(playlist_dir, recursive = TRUE)
    message("Created directory: ", playlist_dir)
  }
  
  # Base URL for the JSON files (adjust if needed)
  base_url <- https://raw.githubusercontent.com/DevinOgrady/spotify_million_playlist_dataset/refs/heads/master/data1/playlist_1.json

  
  # Specify the number of JSON files to download (adjust based on the dataset)
  num_files <- 10
  
  # Initialize list to hold playlist data
  playlists_list <- list()
  
  for (i in seq_len(num_files)) {
    file_name <- paste0("playlist_", i, ".json")
    file_path <- file.path(playlist_dir, file_name)
    file_url <- paste0(base_url, file_name)
    
    # Download file if it doesn't exist
    if (!file.exists(file_path)) {
      tryCatch({
        download.file(file_url, destfile = file_path, mode = "wb")
        message("Downloaded: ", file_name)
      }, error = function(e) {
        message("Error downloading ", file_name, ": ", e$message)
      })
    } else {
      message("File already exists: ", file_name)
    }
    
    # Load the JSON file if present
    if (file.exists(file_path)) {
      playlists_list[[file_name]] <- fromJSON(file_path)
    }
  }
  
  return(playlists_list)
}


# Attempt to load playlists
load_playlists <- function() {
  # Create the directory for playlists if it doesn't exist
  playlist_dir <- "data/mp03/playlists"
  if (!dir.exists(playlist_dir)) {
    dir.create(playlist_dir, recursive = TRUE)
    message("Created directory: ", playlist_dir)
  }
  
  # Base URL for the JSON files (adjust if needed)
  base_url <- "https://raw.githubusercontent.com/DevinOgrady/spotify_million_playlist_dataset/refs/heads/master/data1/"
  
  # Number of JSON files to attempt to download
  num_files <- 10
  
  # Initialize a list to hold the playlist data
  playlists_list <- list()
  
  # Loop over the number of files
  for (i in seq_len(num_files)) {
    file_name <- paste0("playlist_", i, ".json")
    file_path <- file.path(playlist_dir, file_name)
    file_url <- paste0(base_url, file_name)
    
    # Download if file doesn't already exist
    if (!file.exists(file_path)) {
      tryCatch({
        download.file(file_url, destfile = file_path, mode = "wb")
        message("Downloaded: ", file_name)
      }, error = function(e) {
        message("Error downloading ", file_name, ": ", e$message)
      })
    } else {
      message("File already exists: ", file_name)
    }
    
    # Load the JSON file if present
    if (file.exists(file_path)) {
      playlists_list[[file_name]] <- jsonlite::fromJSON(file_path)
    }
  }
  
  return(playlists_list)
}

# ---- Test the function ----
playlists_data <- load_playlists()
length(playlists_data)

# Avoid subscript errors: only inspect the first element if the list is not empty
if (length(playlists_data) > 0) {
  str(playlists_data[[1]])
} else {
  message("No playlists loaded. Check if the JSON files exist or if the URLs are valid.")
}

strip_spotify_prefix <- function(x) {
  # This regex captures the substring after the second colon
  stringr::str_extract(x, ".*:.*:(.*)", group = 1)
}

library(dplyr)
library(purrr)

rectangle_playlists <- function(playlists_list) {
  # For each element (file) in playlists_list, we want to flatten the data
  # into a tidy table. map_dfr() will bind rows automatically.
  all_tracks_df <- map_dfr(playlists_list, function(file_data) {
    
    # If the file doesnâ€™t have a "playlists" element, skip it
    if (!"playlists" %in% names(file_data)) {
      return(tibble())  # Return an empty tibble for this file
    }
    
    # Flatten each playlist within this file
    map_dfr(file_data$playlists, function(pl) {
      
      # If a playlist has no tracks, skip it
      if (!"tracks" %in% names(pl)) {
        return(tibble())
      }
      
      # Convert the list of tracks into a data frame
      tracks_df <- as_tibble(pl$tracks) %>%
        mutate(
          playlist_name      = pl$name,
          playlist_id        = pl$id,
          # If 'num_followers' doesn't exist in your data, replace with NA or another field
          playlist_followers = if ("num_followers" %in% names(pl)) pl$num_followers else NA,
          # We'll define position by row number if there's no explicit field
          playlist_position  = row_number()
        )
      
      # Select and rename columns to match the assignment spec
      tracks_df <- tracks_df %>%
        rename(
          artist_name = artist_name,
          track_name  = track_name,
          album_name  = album_name,
          duration    = duration_ms
        ) %>%
        # Note that the JSON typically has 'artist_uri', 'track_uri', 'album_uri'
        mutate(
          artist_id = strip_spotify_prefix(.data$artist_uri),
          track_id  = strip_spotify_prefix(.data$track_uri),
          album_id  = strip_spotify_prefix(.data$album_uri)
        ) %>%
        # Reorder columns for clarity
        select(
          playlist_name,
          playlist_id,
          playlist_position,
          playlist_followers,
          artist_name,
          artist_id,
          track_name,
          track_id,
          album_name,
          album_id,
          duration
        )
      
      return(tracks_df)
    })
  })
  
  return(all_tracks_df)
}

# Assuming you already have 'playlists_data' from Task 2:
rectified_df <- rectangle_playlists(playlists_data)

# Preview the result
head(rectified_df)
dim(rectified_df)

